/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./plugin.ts":
/*!*******************!*\
  !*** ./plugin.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n//@ts-ignore\n/// <reference path=\"node_modules/@types/jquery/jQuery.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n(function ($) {\n    //@ts-ignore\n    CKEDITOR.plugins.add('template_updater', {\n        icons: 'template_updater',\n        init: function (editor) {\n            var templateVersions = [\n                {\n                    'version': 1,\n                    'templates': [\n                        {\n                            'selector': '.cards',\n                            'listOfActions': [\n                                {\n                                    'action': 'insert',\n                                    'selector': '.card',\n                                    'content': '<strong>Hello</strong>'\n                                },\n                                {\n                                    'action': 'wrapInner',\n                                    'selector': '.card',\n                                    'content': '<div class=\"red\" />'\n                                },\n                                {\n                                    'action': 'updateClassName',\n                                    'selector': '.card',\n                                    'className': 'card',\n                                    'updatedClass': 'card--green',\n                                },\n                                {\n                                    'action': 'addClassName',\n                                    'selector': '.card--green',\n                                    'className': 'test',\n                                },\n                                {\n                                    'action': 'addClassName',\n                                    'selector': '.card--green',\n                                    'className': 'test2',\n                                },\n                                {\n                                    'action': 'removeClassName',\n                                    'selector': '.card--green',\n                                    'className': 'test',\n                                },\n                            ]\n                        }\n                    ]\n                },\n                {\n                    'version': 2,\n                    'templates': [\n                        {\n                            'selector': '.cards',\n                            'listOfActions': [\n                                {\n                                    'action': 'insert',\n                                    'selector': '.card',\n                                    'content': 'Hello V2'\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ];\n            editor.addCommand('updateTemplates', {\n                exec: function (editor) {\n                    var $context = $('.cke_wysiwyg_frame').contents();\n                    // Holy mother of complexity\n                    for (var _i = 0, templateVersions_1 = templateVersions; _i < templateVersions_1.length; _i++) {\n                        var version = templateVersions_1[_i];\n                        var _loop_1 = function (template) {\n                            var $templateElements = $context.find(template.selector);\n                            $templateElements.each(function () {\n                                for (var _i = 0, _a = template.listOfActions; _i < _a.length; _i++) {\n                                    var action = _a[_i];\n                                    runAction($(this), action);\n                                }\n                            });\n                        };\n                        for (var _a = 0, _b = version.templates; _a < _b.length; _a++) {\n                            var template = _b[_a];\n                            _loop_1(template);\n                        }\n                    }\n                }\n            });\n            editor.ui.addButton('template_updater', {\n                id: 'template_updater',\n                label: 'Update templates',\n                command: 'updateTemplates',\n                toolbar: 'template_updater, 10',\n            });\n        }\n    });\n    function insertAction($target, actionDefinition) {\n        $target.append(actionDefinition.content);\n    }\n    function wrapAction($target, actionDefinition) {\n        $target.wrap(actionDefinition.content);\n    }\n    function wrapInnerAction($target, actionDefinition) {\n        $target.wrapInner(actionDefinition.content);\n    }\n    function updateClassNameAction($target, actionDefinition) {\n        $target.removeClass(actionDefinition.className);\n        $target.addClass(actionDefinition.updatedClass);\n    }\n    function removeClassNameAction($target, actionDefinition) {\n        $target.removeClass(actionDefinition.className);\n    }\n    function addClassNameAction($target, actionDefinition) {\n        $target.addClass(actionDefinition.className);\n    }\n    var actionDictionary = {\n        'insert': function ($target, actionDefinition) { return insertAction($target, actionDefinition); },\n        'wrap': function ($target, actionDefinition) { return wrapAction($target, actionDefinition); },\n        'wrapInner': function ($target, actionDefinition) { return wrapInnerAction($target, actionDefinition); },\n        'updateClassName': function ($target, actionDefinition) { return updateClassNameAction($target, actionDefinition); },\n        'addClassName': function ($target, actionDefinition) { return addClassNameAction($target, actionDefinition); },\n        'removeClassName': function ($target, actionDefinition) { return removeClassNameAction($target, actionDefinition); },\n    };\n    function runAction($targetTemplate, actionDefinition) {\n        $targetTemplate.find(actionDefinition.selector).each(function () {\n            actionDictionary[actionDefinition.action]($(this), actionDefinition);\n        });\n    }\n})(jQuery);\n\n\n//# sourceURL=webpack://my-webpack-project/./plugin.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./plugin.ts"](0, __webpack_exports__);
/******/ 	
/******/ })()
;